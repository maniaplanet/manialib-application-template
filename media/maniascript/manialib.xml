<frame>
	<timeout>864000</timeout>
	<script><!--
/**
 * ManiaLib for ManiaScript
 *
 * Minimum Maniaplanet version: 2012-06-13_18_26
 *
 * This framework was specifically designed for use in Manialinks; it provides
 * classic features as you can find in JavaScript frameworks (manipulation
 * primitives, utilities, event listening architecture, etc.).

 * It also provides some simple UI primitives (only dialogs and tooltips for
 * now). It still an early version so it's not documented, not extremely useful,
 * and quite possibly full of bugs. However it's LGPL so use it at your own
 * risk :)
 *
 * And don't hesitate to come ask questions in the dedicated forum, we'll be
 * happy to help:
 * http://forum.maniaplanet.com/viewforum.php?f=40
 *
 * @see		 http://code.google.com/p/manialib/
 * @copyright   Copyright (c) 2009-2011 NADEO (http://www.nadeo.com)
 * @license	 http://www.gnu.org/licenses/lgpl.html LGPL License 3
 * @version	 $Revision$:
 * @author	  $Author$:
 * @date		$Date$:
 */

#Include "MathLib" as MathLib
#Include "TextLib" as TextLib
#RequireContext CMlScript

////////////////////////////////////////////////////////////////////////////////
//
// Internal variables
// These are used by the framework ; you shouldn't interact with them directly
//
////////////////////////////////////////////////////////////////////////////////

declare Boolean[Text] _manialib_visibility;
declare Text[Text] _manialib_values;
declare Text[][Text] _manialib_actions;
declare Text[][][Text][Text] _manialib_event_listeners;
declare Text[][][Text][Text] _manialib_event_listeners_dynamic;
declare Text[] _manialib_action_all_ids;
declare Boolean _manialib_action_all_ids_loaded;

// UI specific

declare Integer _manialib_ui_month;
declare Integer _manialib_ui_year;
declare Text _manialib_datepicker_result;
declare Text _manialib_datepicker_button;

////////////////////////////////////////////////////////////////////////////////
//
// Utils
//
////////////////////////////////////////////////////////////////////////////////

Real manialib_max(Real real1, Real real2)
{
		if(real1 > real2)
		{
				return real1;
		}
		return real2;
}

Real manialib_min(Real real1, Real real2)
{
		if(real1 < real2)
		{
				return real1;
		}
		return real2;
}

Text manialib_event2text(CMlEvent::Type eventType)
{
		declare _bindings = [
				"mouseclick" => CMlEvent::Type::MouseClick,
				"mouseover" => CMlEvent::Type::MouseOver,
				"mouseout" => CMlEvent::Type::MouseOut,
				"keypress" => CMlEvent::Type::KeyPress
		];
		if(_bindings.exists(eventType))
		{
				return _bindings.keyof(eventType);
		}
		log("[WARNING] Unkown event type: "^eventType);
		return "";
}

Void manialib_set_value(Text name, Text value)
{
		_manialib_values[name] = value;
}

Text manialib_get_value(Text name)
{
		if(_manialib_values.existskey(name))
		{
				return _manialib_values[name];
		}
		return "";
}

////////////////////////////////////////////////////////////////////////////////
//
// Date-related
//
////////////////////////////////////////////////////////////////////////////////

Boolean manialib_date_is_leap_year(Integer year)
{
	if ((year % 400 == 0) || ((year % 100 != 0) && (year % 4 == 0)))
	{
		return True;
	}
	return False;

}

Text manialib_date_add_leading_zero(Integer int)
{
	if (int < 10)
	{
		return "0"^int;
	}
	return TextLib::ToText(int);
}

Text manialib_date_iso8601_format(Integer year, Integer month, Integer day, Integer hours, Integer minutes)
{
	// Add leading 0 to month, day, hours, minutes.
	return manialib_date_add_leading_zero(year)^"-"^manialib_date_add_leading_zero(month)^"-"^manialib_date_add_leading_zero(day)^" "^manialib_date_add_leading_zero(hours)^":"^manialib_date_add_leading_zero(minutes);
}

Integer manialib_date_weekday2int(Text day)
{
	declare Integer[Text] Days = ["Monday" => 1, "Tuesday" => 2, "Wednesday" => 3, "Thursday" => 4, "Friday" => 5, "Saturday" => 6, "Sunday" => 7];

	return Days[day];
}

Text manialib_date_weekday2str(Integer day)
{
	declare Text[Integer] Days = [1 => "Sunday", 2 => "Monday", 3 => "Tuesday", 4 => "Wednesday", 5 => "Thursday", 6 => "Friday", 0 => "Saturday"];

	return Days[day];
}

Text manialib_date_month2str(Integer month)
{
	declare Text[Integer] Months = [1 => "January", 2 => "February", 3 => "March", 4 => "April", 5 => "May", 6 => "June", 7 => "July", 8 => "August", 9 => "September", 10 => "October", 11 => "November", 12 => "December"];

	return Months[month];
}

Integer[Text] manialib_date_parse_date(Text curDate)
{
	declare Integer[Text] result = ["year"	=> TextLib::ToInteger(TextLib::SubString(curDate,0,4)),"month" => TextLib::ToInteger(TextLib::SubString(curDate,5,2)),"day"	=> TextLib::ToInteger(TextLib::SubString(curDate,8,2)),"hours" => TextLib::ToInteger(TextLib::SubString(curDate,12,2)),"minutes" => TextLib::ToInteger(TextLib::SubString(curDate,15,2)),"seconds" => TextLib::ToInteger(TextLib::SubString(curDate,18,2))];

	return result;
}

Integer[Text] manialib_date_get_date_time()
{
	declare Text curDate = CurrentLocalDateText;

	return manialib_date_parse_date(curDate);
}

Integer manialib_date_month_to_days(Integer year, Integer month)
{
	declare months = [4, 6, 9, 11];
	if (months.exists(month))
	{
		return 30;
	}
	else if (month == 2)
	{
		if (manialib_date_is_leap_year(year))
		{
			return 29;
		}
		else
		{
			return 28;
		}
	}
	return 31;
}

Text weekDayFromDate(Integer year, Integer month, Integer day)
{
	// Method from http://fr.wikibooks.org/wiki/Trouver_le_jour_de_la_semaine_avec_une_date_donn%C3%A9e
	declare Integer[Integer] Months = [1 => 1, 2 => 4, 3 => 4, 4 => 0, 5 => 2, 6 => 5, 7 => 0, 8 => 3, 9 => 6, 10 => 1, 11 => 4, 12 => 6];

	declare Integer calc;
	declare Integer lastDigitsYear = TextLib::ToInteger(TextLib::SubString(TextLib::ToText(year), 2, 4));

	calc = lastDigitsYear;						// Step 1
	calc = calc + lastDigitsYear/4; 			// step 2
	calc = calc + day; 							// step 3
	calc = calc + Months[month]; 				// step 4
	if (manialib_date_is_leap_year(year) && (month == 2))		// step 5
	{
		calc = calc - 1;
	}
	if ((year >= 1700) && (year <= 1799))		// step 6
	{
		calc = calc + 4;
	}
	else if ((year >= 1800) && (year <= 1899))
	{
		calc = calc + 2;
	}
	else if ((year >= 1900) && (year <= 1999))
	{
		calc = calc + 0;
	}
	else if ((year >= 2000) && (year <= 2099))
	{
		calc = calc + 6;
	}
	else if ((year >= 2100) && (year <= 2199))
	{
		calc = calc + 4;
	}

	return manialib_date_weekday2str(calc % 7);				// step 7
}

////////////////////////////////////////////////////////////////////////////////
//
// Manipulation
//
////////////////////////////////////////////////////////////////////////////////

Void manialib_hide(Text controlId)
{
		declare CMlControl control <=> Page.MainFrame.GetFirstChild(controlId);
		if(control != Null)
		{
				control.Hide();
				_manialib_visibility[controlId] = False;
		}
		else
		{
				log("[WARNING] Trying to access an unkown element: " ^ controlId);
		}
}

Void manialib_show(Text controlId)
{
		declare CMlControl control <=> Page.MainFrame.GetFirstChild(controlId);
		if(control != Null)
		{
				control.Show();
				_manialib_visibility[controlId] = True;
		}
		else
		{
				log("[WARNING] Trying to access an unkown element: " ^ controlId);
		}
}

Boolean manialib_visible(Text controlId)
{
		if(_manialib_visibility.existskey(controlId))
		{
				return _manialib_visibility[controlId];
		}
		return True;
}

Void manialib_toggle(Text controlId)
{
	if(manialib_visible(controlId))
	{
		manialib_hide(controlId);
	}
	else
	{
		manialib_show(controlId);
	}
}

Void manialib_scale(Text controlId, Real scale)
{
		declare CMlControl control <=> Page.MainFrame.GetFirstChild(controlId);
		if(control != Null)
		{
				control.Scale = scale;
		}
		else
		{
				log("[WARNING] Trying to access an unkown element: " ^ controlId);
		}
}

Void manialib_posx(Text controlId, Real posx)
{
		declare CMlControl control <=> Page.MainFrame.GetFirstChild(controlId);
		if(control != Null)
		{
				control.PosnX = posx;
		}
		else
		{
				log("[WARNING] Trying to access an unkown element: " ^ controlId);
		}
}

Void manialib_posy(Text controlId, Real posy)
{
		declare CMlControl control <=> Page.MainFrame.GetFirstChild(controlId);
		if(control != Null)
		{
				control.PosnY = posy;
		}
		else
		{
				log("[WARNING] Trying to access an unkown element: " ^ controlId);
		}
}

Void manialib_posz(Text controlId, Real posz)
{
		declare CMlControl control <=> Page.MainFrame.GetFirstChild(controlId);
		if(control != Null)
		{
				control.PosnZ = posz;
		}
		else
		{
				log("[WARNING] Trying to access an unkown element: " ^ controlId);
		}
}

Void manialib_absolute_posx(Text controlId, Real posx)
{
	declare CMlControl control <=> Page.MainFrame.GetFirstChild(controlId);
	if(control != Null)
	{
		control.PosnX = control.PosnX + (posx - control.AbsolutePosition[0]);
	}
	else
	{
		log("[WARNING] Trying to access an unkown element: " ^ controlId);
	}
}

Void manialib_absolute_posy(Text controlId, Real posy)
{
	declare CMlControl control <=> Page.MainFrame.GetFirstChild(controlId);
	if(control != Null)
	{
		control.PosnY = control.PosnY + (posy - control.AbsolutePosition[1]);
	}
	else
	{
		log("[WARNING] Trying to access an unkown element: " ^ controlId);
	}
}

Void manialib_absolute_posz(Text controlId, Real posz)
{
	declare CMlControl control <=> Page.MainFrame.GetFirstChild(controlId);
	if(control != Null)
	{
		control.PosnZ = control.PosnZ + (posz - control.AbsolutePosition[2]);
	}
	else
	{
		log("[WARNING] Trying to access an unkown element: " ^ controlId);
	}
}

// Weird function/hack for the tooltip feature
Void manialib_move_to_mouse(Text controlId, Real offsetX, Real offsetY, Real boundingBoxX, Real boundingBoxY)
{
		declare CMlControl control <=> Page.MainFrame.GetFirstChild(controlId);
		control.PosnX = manialib_min(MouseX + offsetX, 160.0 - boundingBoxX);
		control.PosnY = manialib_max(MouseY + offsetY, -90.0 + boundingBoxY);
}

Void manialib_set_opacity(Text controlId, Real opacity)
{
		declare CMlControl control <=> Page.MainFrame.GetFirstChild(controlId);
		if(control != Null)
		{
			switchtype(control)
			{
				case CMlLabel:
				{
					(control as CMlLabel).Opacity = opacity;
				}
				case CMlQuad:
				{
					(control as CMlQuad).Opacity = opacity;
				}
				default:
				{
					log("[WARNING] Control opacity cannot be changed");
				}
			}
		}
		else
		{
				log("[WARNING] Trying to access an unkown element: " ^ controlId);
		}
}

Void manialib_set_text(Text controlId, Text newtext)
{
		declare CMlLabel control <=> (Page.MainFrame.GetFirstChild(controlId) as CMlLabel);
		if(control != Null)
		{
				control.SetText(newtext);
		}
		else
		{
				log("[WARNING] Trying to access an unkown element: " ^ controlId);
		}
}

Void manialib_set_textcolor(Text controlId, Vec3 textColor)
{
		declare CMlLabel control <=> (Page.MainFrame.GetFirstChild(controlId) as CMlLabel);
		if(control != Null)
		{
				control.TextColor = textColor;
		}
		else
		{
				log("[WARNING] Trying to access an unkown element: " ^ controlId);
		}
}

Text manialib_get_entry_value(Text controlId)
{
		declare CMlEntry control <=> (Page.MainFrame.GetFirstChild(controlId) as CMlEntry);
		if(control != Null)
		{
				return control.Value;
		}
		log("[WARNING] Trying to access an unkown element: " ^ controlId);
		return "";
}

Void manialib_set_entry_value(Text controlId, Text value)
{
		declare CMlEntry control <=> (Page.MainFrame.GetFirstChild(controlId) as CMlEntry);
		if(control != Null)
		{
				control.Value = value;
		}
		else
		{
				log("[WARNING] Trying to access an unkown element: " ^ controlId);
		}
}

Void manialib_set_image(Text controlId, Text URL)
{
	declare CMlQuad control <=> (Page.MainFrame.GetFirstChild(controlId) as CMlQuad);
	if(control != Null)
	{
		control.ImageUrl = URL;
	}
	else
	{
		log("[WARNING] Trying to access an unkown element: " ^ controlId);
	}
}

Void manialib_set_imagefocus(Text controlId, Text URL)
{
	declare CMlQuad control <=> (Page.MainFrame.GetFirstChild(controlId) as CMlQuad);
	if(control != Null)
	{
		control.ImageUrlFocus = URL;
	}
	else
	{
		log("[WARNING] Trying to access an unkown element: " ^ controlId);
	}
}

Void manialib_set_focus(Text controlId)
{
	declare CMlControl control <=> (Page.MainFrame.GetFirstChild(controlId) as CMlControl);
	if(control != Null)
	{
		control.Focus();
	}
	else
	{
		log("[WARNING] Trying to access an unkown element: " ^ controlId);
	}
}

Void manialib_set_style(Text controlId, Text style)
{
	declare CMlQuad control <=> (Page.MainFrame.GetFirstChild(controlId) as CMlQuad);
	if(control != Null)
	{
		control.Style = style;
	}
	else
	{
		log("[WARNING] Trying to access an unkown element: " ^ controlId);
	}
}

Void manialib_set_substyle(Text controlId, Text substyle)
{
	declare CMlQuad control <=> (Page.MainFrame.GetFirstChild(controlId) as CMlQuad);
	if(control != Null)
	{
		control.Substyle = substyle;
	}
	else
	{
		log("[WARNING] Trying to access an unkown element: " ^ controlId);
	}
}

Void manialib_disable_links()
{
	Page.LinksInhibited = True;
}

Void manialib_enable_links()
{
	Page.LinksInhibited = False;
}

// Date Picker
Void manialib_ui_datepicker_update()
{
	declare Integer startDay = manialib_date_weekday2int(weekDayFromDate(_manialib_ui_year,_manialib_ui_month,1));
	declare Integer manialib_date_month_to_days = manialib_date_month_to_days(_manialib_ui_year,_manialib_ui_month);

	declare CMlLabel label;
	declare CMlFrame container <=> (Page.GetFirstChild("datepicker-days") as CMlFrame);
	declare CMlLabel header_label <=> (Page.GetFirstChild("datepicker-header-label") as CMlLabel);

	header_label.SetText(manialib_date_month2str(_manialib_ui_month)^" "^_manialib_ui_year);

	declare Integer i = 1;
	declare Integer numDay = 1;

	foreach(dayLabel in container.Controls) {
		label <=> (dayLabel as CMlLabel);

		if (i < startDay)
		{
			label.Hide();
		}
		else
		{
			if (numDay <= manialib_date_month_to_days)
			{
				label.SetText("$000"^(numDay));
				label.Show();
				numDay = numDay + 1;
			}
			else
			{
				//label.SetText("");
				label.Hide();
			}
		}
		i = i + 1;
	}
}

Void manialib_ui_datepicker_event(Text action, Text content)
{
	if (action == "update")
	{
		if (content == "+1")
		{
			if (_manialib_ui_month == 12)
			{
				_manialib_ui_month = 1;
				_manialib_ui_year = _manialib_ui_year + 1;
			}
			else
			{
				_manialib_ui_month = _manialib_ui_month + 1;
			}
			manialib_ui_datepicker_update();
		}
		else if (content == "-1")
		{
			if (_manialib_ui_month == 1)
			{
				_manialib_ui_month = 12;
				_manialib_ui_year = _manialib_ui_year - 1;
			}
			else
			{
				_manialib_ui_month = _manialib_ui_month - 1;
			}
			manialib_ui_datepicker_update();
		}
		else if (content == "0")
		{
			manialib_ui_datepicker_update();
		}
	}
	else if (action == "click")
	{
		declare Integer startDay = manialib_date_weekday2int(weekDayFromDate(_manialib_ui_year,_manialib_ui_month,1));

		declare Integer realDay = TextLib::ToInteger(content) - startDay + 1;

		// Because the value of the ID is not correct
		// We have to substract with the real begining of the week
		manialib_set_entry_value(_manialib_datepicker_result, manialib_date_iso8601_format(_manialib_ui_year, _manialib_ui_month, realDay, 0, 0));

		manialib_ui_datepicker_event("hide", "none");
	}
	else if (action == "hide")
	{
		manialib_posx("datepicker",640.0);
	}
}

////////////////////////////////////////////////////////////////////////////////
//
// ManiaScript Framework Actions handling (internal stuff)
//
////////////////////////////////////////////////////////////////////////////////

Void manialib_action_register(Text id, Text[] action)
{
		_manialib_actions[id] = action;
}

Void manialib_action_load_all_ids()
{
	if(_manialib_action_all_ids_loaded != True)
	{
		declare CMlFrame[] _frame_stack;
		_frame_stack.add(Page.MainFrame);
		while(_frame_stack.count > 0)
		{
			declare _currindex = _frame_stack.count - 1;
			declare CMlFrame _frame <=> _frame_stack[_currindex];
			_frame_stack.removekey(_currindex);
			if(_frame.ControlId != "")
			{
				_manialib_action_all_ids.add(_frame.ControlId);
			}
			foreach(_control in _frame.Controls)
			{
				switchtype(_control as __control)
				{
					case CMlFrame:
					{
						_frame_stack.add( __control);
					}
					default:
					{
						if(__control.ControlId != "")
						{
							_manialib_action_all_ids.add(__control.ControlId);
						}
					}
				}
			}
		}
	}
	_manialib_action_all_ids_loaded = True;
}

Text[] manialib_action_get_matching_ids(Text selector)
{
	declare Text[] _ids;
	declare _selector = TextLib::SubString(selector, 0, TextLib::Length(selector)-1);
	manialib_action_load_all_ids();
	foreach(controlId in _manialib_action_all_ids)
	{
		if(TextLib::SubText(controlId, 0, TextLib::Length(_selector)) == _selector)
		{
			_ids.add(controlId);
		}
	}
	return _ids;
}

Void manialib_action_execute(Text[] action)
{
		if(action.count == 0)
		{
			return;
		}
		if(action.existskey(1))
		{
			if(TextLib::SubString(action[1], TextLib::Length(action[1])-1, 1)=="*")
			{
				declare _ids = manialib_action_get_matching_ids(action[1]);
				foreach(controlId in _ids)
				{
					declare _action = action;
					_action[1] = controlId;
					manialib_action_execute(_action);
				}
				return;
			}
		}
		switch(action[0])
		{
				case "set_value":
						manialib_set_value(action[1], action[2]);

				case "manialink":
						OpenLink(action[1], ::LinkType::ManialinkBrowser);

				case "manialinkid":
						OpenLink(action[1], ::LinkType::ManialinkFromId);

				case "external":
						OpenLink(action[1], ::LinkType::ExternalBrowser);

				case "externalid":
						OpenLink(action[1], ::LinkType::ExternalFromId);

				case "goto":
						OpenLink(action[1], ::LinkType::Goto);

				case "goto":
						OpenLink(action[1], ::LinkType::GotoFromId);

				case "hide":
						manialib_hide(action[1]);

				case "show":
						manialib_show(action[1]);

				case "toggle":
						manialib_toggle(action[1]);

				case "posx":
						manialib_posx(action[1], TextLib::ToReal(action[2]));

				case "posy":
						manialib_posy(action[1], TextLib::ToReal(action[2]));

				case "posz":
						manialib_posz(action[1], TextLib::ToReal(action[2]));

				case "scale":
						manialib_scale(action[1], TextLib::ToReal(action[2]));

				case "absolute_posx":
					manialib_absolute_posx(action[1], TextLib::ToReal(action[2]));

				case "absolute_posy":
					manialib_absolute_posy(action[1], TextLib::ToReal(action[2]));

				case "absolute_posz":
					manialib_absolute_posz(action[1], TextLib::ToReal(action[2]));

				case "set_text":
						manialib_set_text(action[1], action[2]);

				case "set_entry_value":
						manialib_set_entry_value(action[1], action[2]);

				case "set_image":
					manialib_set_image(action[1], action[2]);

				case "move_to_mouse":
						manialib_move_to_mouse(action[1],
							TextLib::ToReal(action[2]), TextLib::ToReal(action[3]),
							TextLib::ToReal(action[4]), TextLib::ToReal(action[5]));

				case "disable_links":
						manialib_disable_links();

				case "enable_links":
						manialib_enable_links();

				// special case...
				case "action_execute_id_from_values":
				{
						declare id = manialib_get_value(action[1]);
						if(_manialib_actions.existskey(id))
						{
								manialib_action_execute(_manialib_actions[id]);
						}
				}

				case "date_picker":
					manialib_ui_datepicker_event(action[1], action[2]);

				case "set_clublink":
					SetLocalUserClubLink(action[1]);

				case "browser_back":
					BrowserBack();

				case "browser_quit":
					BrowserQuit();

				case "browser_home":
					BrowserHome();

				// You can also just pass an empty array
				case "":
						{}

				case "none":
						{}

				default:
						log("[WARNING] Unkown action name: " ^ action[1]);
		}
		return;
}

////////////////////////////////////////////////////////////////////////////////
//
// Event listening
//
////////////////////////////////////////////////////////////////////////////////

Void manialib_event_add_listener(Text controlId, CMlEvent::Type eventType, Text[] action)
{
	if(TextLib::SubString(controlId, TextLib::Length(controlId)-1, 1) == "*")
	{
		declare controlIdDynamic = TextLib::SubString(controlId, 0, TextLib::Length(controlId)-1);
		if(!_manialib_event_listeners_dynamic.existskey(controlIdDynamic))
		{
				_manialib_event_listeners_dynamic[controlIdDynamic] = Text[][][Text];
		}
		if(!_manialib_event_listeners_dynamic[controlIdDynamic].existskey(manialib_event2text(eventType)))
		{
				_manialib_event_listeners_dynamic[controlIdDynamic][manialib_event2text(eventType)] = Text[][];
		}
		_manialib_event_listeners_dynamic[controlIdDynamic][manialib_event2text(eventType)].add(action);
	}
	else
	{
		if(!_manialib_event_listeners.existskey(controlId))
		{
				_manialib_event_listeners[controlId] = Text[][][Text];
		}
		if(!_manialib_event_listeners[controlId].existskey(manialib_event2text(eventType)))
		{
				_manialib_event_listeners[controlId][manialib_event2text(eventType)] = Text[][];
		}
		_manialib_event_listeners[controlId][manialib_event2text(eventType)].add(action);
	}
}

Void manialib_event_listener(CMlEvent event)
{
		foreach(dynamicControlId => __unused__ in _manialib_event_listeners_dynamic)
		{
			if(TextLib::SubString(event.ControlId, 0, TextLib::Length(dynamicControlId)) == dynamicControlId)
			{
				declare eventTypeName = manialib_event2text(event.Type);
				if(_manialib_event_listeners_dynamic[dynamicControlId].existskey(eventTypeName))
				{
						foreach(action in _manialib_event_listeners_dynamic[dynamicControlId][eventTypeName])
						{
								manialib_action_execute(action);
						}
				}
			}
		}
		if(_manialib_event_listeners.existskey(event.ControlId))
		{
				declare eventTypeName = manialib_event2text(event.Type);
				if(_manialib_event_listeners[event.ControlId].existskey(eventTypeName))
				{
						foreach(action in _manialib_event_listeners[event.ControlId][eventTypeName])
						{
								manialib_action_execute(action);
						}
				}
		}
}

Void manialib_main_loop()
{
		while(True)
		{
				foreach(Event in PendingEvents)
				{
						manialib_event_listener(Event);
				}
				yield;
		}
}

////////////////////////////////////////////////////////////////////////////////
//
// UI Primitives
//
////////////////////////////////////////////////////////////////////////////////
Void manialib_ui_datepicker_init(Text date_picker_result_id, Text date_picker_button_id) {
	_manialib_datepicker_result = date_picker_result_id;
	_manialib_datepicker_button = date_picker_button_id;

	declare _manialib_datepicker_current_date = manialib_date_get_date_time();

	_manialib_ui_year = _manialib_datepicker_current_date["year"];
	_manialib_ui_month = _manialib_datepicker_current_date["month"];

	declare Integer i;

	manialib_event_add_listener("datepicker-close", CMlEvent::Type::MouseClick, ["date_picker", "hide", "none"]);

	manialib_event_add_listener("datepicker-header-next", CMlEvent::Type::MouseClick, ["date_picker", "update", "+1"]);
	manialib_event_add_listener("datepicker-header-previous", CMlEvent::Type::MouseClick, ["date_picker", "update", "-1"]);

	manialib_event_add_listener(date_picker_button_id, CMlEvent::Type::MouseClick, ["move_to_mouse", "datepicker", "2.0", "-5.0", "70.0", "52.0"]);

	manialib_ui_datepicker_event("update", "0");

	//manialib_posx("manialib-dialog", 0.0);

	for (i, 1, 37)
	{
		manialib_event_add_listener("datepicker-day-"^TextLib::ToText(i), CMlEvent::Type::MouseClick, ["date_picker","click",TextLib::ToText(i)]);
	}
}

Void manialib_ui_message(Text controlId, Text message)
{
	manialib_hide("manialib-message");
	manialib_posx("manialib-message", 0.0);

	manialib_event_add_listener("manialib-message-blur", CMlEvent::Type::MouseClick, ["hide", "manialib-message"]);
	manialib_event_add_listener("manialib-message-blur", CMlEvent::Type::MouseClick, ["enable_links"]);

	manialib_event_add_listener("manialib-message-ok", CMlEvent::Type::MouseClick, ["hide", "manialib-message"]);
	manialib_event_add_listener("manialib-message-ok", CMlEvent::Type::MouseClick, ["enable_links"]);

	manialib_event_add_listener(controlId, CMlEvent::Type::MouseClick, ["set_text", "manialib-message-text", message]);
	manialib_event_add_listener(controlId, CMlEvent::Type::MouseClick, ["show", "manialib-message"]);
	manialib_event_add_listener(controlId, CMlEvent::Type::MouseClick, ["disable_links"]);
}

Void manialib_ui_dialog(Text controlId, Text message, Text[] action)
{
	manialib_action_register(controlId, action);

	manialib_hide("manialib-dialog");
	manialib_posx("manialib-dialog", 0.0);

	manialib_event_add_listener("manialib-dialog-no", CMlEvent::Type::MouseClick, ["hide", "manialib-dialog"]);
	manialib_event_add_listener("manialib-dialog-no", CMlEvent::Type::MouseClick, ["enable_links"]);

	manialib_event_add_listener("manialib-dialog-blur", CMlEvent::Type::MouseClick, ["hide", "manialib-dialog"]);
	manialib_event_add_listener("manialib-dialog-blur", CMlEvent::Type::MouseClick, ["enable_links"]);

	manialib_event_add_listener("manialib-dialog-yes", CMlEvent::Type::MouseClick, ["hide", "manialib-dialog"]);
	manialib_event_add_listener("manialib-dialog-yes", CMlEvent::Type::MouseClick, ["enable_links"]);
	manialib_event_add_listener("manialib-dialog-yes", CMlEvent::Type::MouseClick, ["action_execute_id_from_values", "manialib-dialog-yes"]);

	manialib_event_add_listener(controlId, CMlEvent::Type::MouseClick, ["set_text", "manialib-dialog-text", message]);
	manialib_event_add_listener(controlId, CMlEvent::Type::MouseClick, ["show", "manialib-dialog"]);
	manialib_event_add_listener(controlId, CMlEvent::Type::MouseClick, ["disable_links"]);
	manialib_event_add_listener(controlId, CMlEvent::Type::MouseClick, ["set_value", "manialib-dialog-yes", controlId]);
}

Void manialib_ui_magnifier(Text controlId, Text scale)
{
	declare CMlQuad control <=> (Page.MainFrame.GetFirstChild(controlId) as CMlQuad);

	manialib_posx("manialib-magnifier", 0.0);
	manialib_hide("manialib-magnifier");

	manialib_event_add_listener(controlId, CMlEvent::Type::MouseOver, ["show", "manialib-magnifier"]);
	manialib_event_add_listener(controlId, CMlEvent::Type::MouseOver, ["set_image", "manialib-magnifier-image", control.ImageUrl]);

	manialib_event_add_listener(controlId, CMlEvent::Type::MouseOut, ["hide", "manialib-magnifier"]);
}

Void manialib_ui_tooltip(Text controlId, Text message)
{
	manialib_hide("manialib-dialog");

	manialib_event_add_listener(controlId, CMlEvent::Type::MouseOver, ["set_text", "manialib-tooltip-text", message]);
	manialib_event_add_listener(controlId, CMlEvent::Type::MouseOver, ["show", "manialib-tooltip"]);
	manialib_event_add_listener(controlId, CMlEvent::Type::MouseOver, ["move_to_mouse", "manialib-tooltip", "2.0", "-5.0", "75.0", "11.0"]);
	manialib_event_add_listener(controlId, CMlEvent::Type::MouseOut, ["hide", "manialib-tooltip"]);
}
-->
	</script>
	<frame id="manialib-magnifier" posn="320 0 4">
		<quad halign="center" valign="center" sizen="100 58 20" posn="0 0" style="Bgs1" substyle="BgDialogBlur"/>
		<quad halign="center" valign="center" sizen="96 54 21" id="manialib-magnifier-image"/>
	</frame>
	<frame posn="320 0 25" id="manialib-dialog">
		<quad sizen="320 200" halign="center" valign="center" style="Bgs1" substyle="BgDialogBlur" scriptevents="1" id="manialib-dialog-blur"/>
		<frame posn="-60 35 0.1">
			<quad sizen="123 63" style="Bgs1InRace" substyle="Shadow"/>
			<quad posn="1.5 -1.5 0.1" sizen="120 60" bgcolor="fffe"/>
			<label id="manialib-dialog-text" posn="60 -25 0.8" sizen="110 7" halign="center" valign="center" style="TextTips" text="-" autonewline="1"/>
			<label id="manialib-dialog-yes" posn="55 -47 0.8" sizen="35 7" halign="right" style="CardButtonMedium" scriptevents="1" text="Yes"/>
			<label id="manialib-dialog-no" posn="65 -47 0.8" sizen="35 7" style="CardButtonMedium" scriptevents="1" text="No"/>
		</frame>
	</frame>
	<frame posn="320 0 4" id="manialib-message">
		<quad sizen="320 200" halign="center" valign="center" style="Bgs1" substyle="BgDialogBlur" scriptevents="1" id="manialib-message-blur"/>
		<frame posn="-60 35 0.1">
			<quad sizen="123 63" style="Bgs1InRace" substyle="Shadow"/>
			<quad posn="1.5 -1.5 0.1" sizen="120 60" bgcolor="fffe"/>
			<label id="manialib-message-text" posn="60 -25 0.8" sizen="110 7" halign="center" valign="center" style="TextTips" text="-" autonewline="1"/>
			<label id="manialib-message-ok" posn="80 -47 0.8" sizen="35 7" halign="right" style="CardButtonMedium" scriptevents="1" text="Ok"/>
		</frame>
	</frame>
	<frame posn="300 0 4.9" id="manialib-tooltip">
		<quad sizen="75 11" id="manialib-tooltip-box" style="Bgs1InRace" substyle="BgTitle3_3"/>
		<label id="manialib-tooltip-text" posn="4 -5.5 0.1" sizen="67 7" valign="center2" style="TextTips"/>
	</frame>
	<frame id="datepicker" posn="640 0 4">
		<frame posn="0 0 -0.1">
			<quad sizen="640 360" id="datepicker-close" halign="center" valign="center" scriptevents="1"/>
		</frame>
		<quad sizen="70 52" style="Bgs1" substyle="BgCard1"/>
		<frame id="datepicker-header" posn="0 0 0.1">
			<quad posn="2 -2" sizen="66 6" style="Bgs1" substyle="BgWindow2"/>
			<quad id="datepicker-header-previous" posn="2 -1 0.2" sizen="8 8" style="Icons64x64_1" substyle="ArrowPrev" scriptevents="1"/>
			<quad id="datepicker-header-next" posn="60 -1 0.2" sizen="8 8" style="Icons64x64_1" substyle="ArrowNext" scriptevents="1"/>
			<label id="datepicker-header-label" posn="35 -5 0.2" sizen="70 7" halign="center" valign="center" style="TextButtonMedium"/>
		</frame>
		<frame posn="5 -10 0.1" scale="1">
			<label sizen="4 4" style="TextStaticSmall" text="Mo"/>
			<label posn="9 0" sizen="4 4" style="TextStaticSmall" text="Tu"/>
			<label posn="18 0" sizen="4 4" style="TextStaticSmall" text="We"/>
			<label posn="27 0" sizen="4 4" style="TextStaticSmall" text="Th"/>
			<label posn="36 0" sizen="4 4" style="TextStaticSmall" text="Fr"/>
			<label posn="45 0" sizen="4 4" style="TextStaticSmall" text="Sa"/>
			<label posn="54 0" sizen="4 4" style="TextStaticSmall" text="Sun"/>
		</frame>
		<frame posn="5 -17 0.1" scale="1" id="datepicker-days">
			<label id="datepicker-day-1" posn="2 0" sizen="9 6" valign="center" halign="center" style="TextValueSmall" focusareacolor1="FFF0" focusareacolor2="FFF0"  scriptevents="1" text="$0001"/>
			<label id="datepicker-day-2" posn="11 0" sizen="9 6" valign="center" halign="center" style="TextValueSmall" focusareacolor1="FFF0" focusareacolor2="FFF0"  scriptevents="1" text="$0002"/>
			<label id="datepicker-day-3" posn="20 0" sizen="9 6" valign="center" halign="center" style="TextValueSmall" focusareacolor1="FFF0" focusareacolor2="FFF0"  scriptevents="1" text="$0003"/>
			<label id="datepicker-day-4" posn="29 0" sizen="9 6" valign="center" halign="center" style="TextValueSmall" focusareacolor1="FFF0" focusareacolor2="FFF0"  scriptevents="1" text="$0004"/>
			<label id="datepicker-day-5" posn="38 0" sizen="9 6" valign="center" halign="center" style="TextValueSmall" focusareacolor1="FFF0" focusareacolor2="FFF0"  scriptevents="1" text="$0005"/>
			<label id="datepicker-day-6" posn="47 0" sizen="9 6" valign="center" halign="center" style="TextValueSmall" focusareacolor1="FFF0" focusareacolor2="FFF0"  scriptevents="1" text="$0006"/>
			<label id="datepicker-day-7" posn="56 0" sizen="9 6" valign="center" halign="center" style="TextValueSmall" focusareacolor1="FFF0" focusareacolor2="FFF0"  scriptevents="1" text="$0007"/>
			<label id="datepicker-day-8" posn="2 -6" sizen="9 6" valign="center" halign="center" style="TextValueSmall" focusareacolor1="FFF0" focusareacolor2="FFF0"  scriptevents="1" text="$0008"/>
			<label id="datepicker-day-9" posn="11 -6" sizen="9 6" valign="center" halign="center" style="TextValueSmall" focusareacolor1="FFF0" focusareacolor2="FFF0"  scriptevents="1" text="$0009"/>
			<label id="datepicker-day-10" posn="20 -6" sizen="9 6" valign="center" halign="center" style="TextValueSmall" focusareacolor1="FFF0" focusareacolor2="FFF0"  scriptevents="1" text="$00010"/>
			<label id="datepicker-day-11" posn="29 -6" sizen="9 6" valign="center" halign="center" style="TextValueSmall" focusareacolor1="FFF0" focusareacolor2="FFF0"  scriptevents="1" text="$00011"/>
			<label id="datepicker-day-12" posn="38 -6" sizen="9 6" valign="center" halign="center" style="TextValueSmall" focusareacolor1="FFF0" focusareacolor2="FFF0"  scriptevents="1" text="$00012"/>
			<label id="datepicker-day-13" posn="47 -6" sizen="9 6" valign="center" halign="center" style="TextValueSmall" focusareacolor1="FFF0" focusareacolor2="FFF0"  scriptevents="1" text="$00013"/>
			<label id="datepicker-day-14" posn="56 -6" sizen="9 6" valign="center" halign="center" style="TextValueSmall" focusareacolor1="FFF0" focusareacolor2="FFF0"  scriptevents="1" text="$00014"/>
			<label id="datepicker-day-15" posn="2 -12" sizen="9 6" valign="center" halign="center" style="TextValueSmall" focusareacolor1="FFF0" focusareacolor2="FFF0"  scriptevents="1" text="$00015"/>
			<label id="datepicker-day-16" posn="11 -12" sizen="9 6" valign="center" halign="center" style="TextValueSmall" focusareacolor1="FFF0" focusareacolor2="FFF0"  scriptevents="1" text="$00016"/>
			<label id="datepicker-day-17" posn="20 -12" sizen="9 6" valign="center" halign="center" style="TextValueSmall" focusareacolor1="FFF0" focusareacolor2="FFF0"  scriptevents="1" text="$00017"/>
			<label id="datepicker-day-18" posn="29 -12" sizen="9 6" valign="center" halign="center" style="TextValueSmall" focusareacolor1="FFF0" focusareacolor2="FFF0"  scriptevents="1" text="$00018"/>
			<label id="datepicker-day-19" posn="38 -12" sizen="9 6" valign="center" halign="center" style="TextValueSmall" focusareacolor1="FFF0" focusareacolor2="FFF0"  scriptevents="1" text="$00019"/>
			<label id="datepicker-day-20" posn="47 -12" sizen="9 6" valign="center" halign="center" style="TextValueSmall" focusareacolor1="FFF0" focusareacolor2="FFF0"  scriptevents="1" text="$00020"/>
			<label id="datepicker-day-21" posn="56 -12" sizen="9 6" valign="center" halign="center" style="TextValueSmall" focusareacolor1="FFF0" focusareacolor2="FFF0"  scriptevents="1" text="$00021"/>
			<label id="datepicker-day-22" posn="2 -18" sizen="9 6" valign="center" halign="center" style="TextValueSmall" focusareacolor1="FFF0" focusareacolor2="FFF0"  scriptevents="1" text="$00022"/>
			<label id="datepicker-day-23" posn="11 -18" sizen="9 6" valign="center" halign="center" style="TextValueSmall" focusareacolor1="FFF0" focusareacolor2="FFF0"  scriptevents="1" text="$00023"/>
			<label id="datepicker-day-24" posn="20 -18" sizen="9 6" valign="center" halign="center" style="TextValueSmall" focusareacolor1="FFF0" focusareacolor2="FFF0"  scriptevents="1" text="$00024"/>
			<label id="datepicker-day-25" posn="29 -18" sizen="9 6" valign="center" halign="center" style="TextValueSmall" focusareacolor1="FFF0" focusareacolor2="FFF0"  scriptevents="1" text="$00025"/>
			<label id="datepicker-day-26" posn="38 -18" sizen="9 6" valign="center" halign="center" style="TextValueSmall" focusareacolor1="FFF0" focusareacolor2="FFF0"  scriptevents="1" text="$00026"/>
			<label id="datepicker-day-27" posn="47 -18" sizen="9 6" valign="center" halign="center" style="TextValueSmall" focusareacolor1="FFF0" focusareacolor2="FFF0"  scriptevents="1" text="$00027"/>
			<label id="datepicker-day-28" posn="56 -18" sizen="9 6" valign="center" halign="center" style="TextValueSmall" focusareacolor1="FFF0" focusareacolor2="FFF0"  scriptevents="1" text="$00028"/>
			<label id="datepicker-day-29" posn="2 -24" sizen="9 6" valign="center" halign="center" style="TextValueSmall" focusareacolor1="FFF0" focusareacolor2="FFF0"  scriptevents="1" text="$00029"/>
			<label id="datepicker-day-30" posn="11 -24" sizen="9 6" valign="center" halign="center" style="TextValueSmall" focusareacolor1="FFF0" focusareacolor2="FFF0"  scriptevents="1" text="$00030"/>
			<label id="datepicker-day-31" posn="20 -24" sizen="9 6" valign="center" halign="center" style="TextValueSmall" focusareacolor1="FFF0" focusareacolor2="FFF0"  scriptevents="1" text="$00031"/>
			<label id="datepicker-day-32" posn="29 -24" sizen="9 6" valign="center" halign="center" style="TextValueSmall" focusareacolor1="FFF0" focusareacolor2="FFF0"  scriptevents="1" text="$00032"/>
			<label id="datepicker-day-33" posn="38 -24" sizen="9 6" valign="center" halign="center" style="TextValueSmall" focusareacolor1="FFF0" focusareacolor2="FFF0"  scriptevents="1" text="$00033"/>
			<label id="datepicker-day-34" posn="47 -24" sizen="9 6" valign="center" halign="center" style="TextValueSmall" focusareacolor1="FFF0" focusareacolor2="FFF0"  scriptevents="1" text="$00034"/>
			<label id="datepicker-day-35" posn="56 -24" sizen="9 6" valign="center" halign="center" style="TextValueSmall" focusareacolor1="FFF0" focusareacolor2="FFF0"  scriptevents="1" text="$00035"/>
			<label id="datepicker-day-36" posn="2 -30" sizen="9 6" valign="center" halign="center" style="TextValueSmall" focusareacolor1="FFF0" focusareacolor2="FFF0"  scriptevents="1" text="$00036"/>
			<label id="datepicker-day-37" posn="11 -30" sizen="9 6" valign="center" halign="center" style="TextValueSmall" focusareacolor1="FFF0" focusareacolor2="FFF0"  scriptevents="1" text="$00037"/>
		</frame>
	</frame>
</frame>